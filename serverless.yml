service: dynamodb-crud-api

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: us-west-1
  environment:
    DYNAMODB_TABLE_NAME: ${self:custom.vendorsMenus}

custom:
  vendorsMenus: vendors-menus${self:provider.stage}
  fileUploadBucketName: vendors-menu-images-${self:provider.stage}

plugins:
  - serverless-iam-roles-per-function

functions:
  getMenu:
    handler: src/lambdas/getMenu/get-menu.getMenu
    name: get-menu
    description: Fetches a menu for one vendor using its vendorId
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: menu/{vendorId}
          method: GET
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: !GetAtt VendorsMenusTable.Arn
  createMenu:
    handler: src/lambdas/createMenu/create-menu.createMenu
    name: create-new-menu
    description: Creates a menu for one vendor using its vendorId
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: post
          method: POST
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
        Resource: !GetAtt VendorsMenusTable.Arn
  updateMenu:
    handler: src/lambdas/updateMenu/update-menu.updateMenu
    name: update-menu
    description: Updates a menu for one vendor using its vendorId
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: menu/{vendorId}
          method: PUT
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:UpdateItem"
        Resource: !GetAtt VendorsMenusTable.Arn
  deleteMenu:
    handler: api.deleteMenu
    name: delete-menu
    description: Delete an entire menu for one vendor using its vendorId
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: menu/{vendorId}
          method: DELETE
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:DeleteItem"
        Resource: !GetAtt VendorsMenusTable.Arn
  # getAllMenus:
  #   handler: api.getAllMenus
  #   name: get-all-menus
  #   memorySize: 128 # mb
  #   timeout: 5 # seconds
  #   events:
  #     - http:
  #         path: allmenus
  #         method: GET
  #   iamRoleStatements:
  #     - Effect: "Allow"
  #       Action:
  #         - "dynamodb:Scan"
  #       Resource: !GetAtt VendorsMenusTable.Arn
  s3FileUploader:
    handler: src/lambdas/uploadImageToS3/upload-image-to-S3.handler
    name: s3-image-uploader
    description: V2 - A lambda handler that uploads a file to an S3 bucket based on an API Gateway trigger.
    # timeout: 60 # seconds
    # memorySize: 128 # mb
    events:
      - http:
          path: images
          method: POST
          cors: true # <-- CORS!
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "s3:*"
        Resource: arn:aws:s3:::${self:custom.fileUploadBucketName}/*
    environment:
      FILE_UPLOAD_BUCKET_NAME: ${self:custom.fileUploadBucketName}

resources:
  Resources:
    VendorsMenusTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.vendorsMenus}
        AttributeDefinitions:
          - AttributeName: vendorId
            AttributeType: S
        KeySchema:
          - AttributeName: vendorId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    FileBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.fileUploadBucketName}
        AccessControl: PublicRead
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Token'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Token'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
